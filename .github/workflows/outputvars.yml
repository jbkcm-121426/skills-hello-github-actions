name: Test PowerShell on Ubuntu
on:
  push:    
    branches:
      - main
jobs:
  pester-test:
    name: Pester test
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Perform a Pester test from the command-line
        shell: pwsh
        run: Test-Path resultsfile.log | Should -Be $true
      - name: Perform a Pester test from the Tests.ps1 file
        shell: pwsh
        run: |
          Invoke-Pester Unit.Tests.ps1 -Passthru
  install-dependencies:
    name: Install dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install from PSGallery
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module SqlServer, PSScriptAnalyzer
  example_job:
    runs-on: ubuntu-latest
    steps:
      - name: Set output variable
        id: step1
        run: |
          echo "message=Hello from step 1" >> $GITHUB_OUTPUT
          echo "MY_VAR=some_value" >> $GITHUB_OUTPUT
          echo "::set-output name=another_var::some_other_value"

      - name: Get output variable
        run: |
          echo "Message: ${{ steps.step1.outputs.message }}"
          echo "MY_VAR: ${{ steps.step1.outputs.MY_VAR }}"
          echo "Another var: ${{ steps.step1.outputs.another_var }}"
  job1:
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      output1: ${{ steps.step1.outputs.test }}
      output2: ${{ steps.step2.outputs.test }}
      output3: "some static value"
    steps:
      - id: step1
        run: echo "test=Stepoutput1" >> "$GITHUB_OUTPUT"
      - id: step2
        run: echo "test=Stepoutput1" >> "$GITHUB_OUTPUT"
  job2:
    runs-on: ubuntu-latest
    needs: job1
    steps:
      - env:
          OUTPUT1: ${{needs.job1.outputs.output1}}
          OUTPUT2: ${{needs.job1.outputs.output2}}
          OUTPUT3: ${{needs.job1.outputs.output3}}
        run: echo "$OUTPUT1 $OUTPUT2 $OUTPUT3"
